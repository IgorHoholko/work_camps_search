# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QFileDialog
import io
import sys
import asyncio
import os
import shutil
import lxml.etree

from typing import Tuple, List, Union
from folium.plugins import MarkerCluster
from folium.map import Marker
import folium
import pandas as pd
from .analytics.tools import Analytics
from .analytics.util import renderProjectsPageHTML

from collections import Counter

TEMP_PATH = os.path.join(os.path.dirname(__file__), "TEMP")
CACHE_PATH = os.path.join(os.path.dirname(__file__), "_cache")

CACHE_SAVED_PATH = os.path.join(CACHE_PATH, 'saved.txt')
CACHE_VIEWD_PATH = os.path.join(CACHE_PATH, 'viewed.txt')

os.makedirs(TEMP_PATH, exist_ok=True)
os.makedirs(CACHE_PATH, exist_ok=True)



class MainWindow(QtWidgets.QMainWindow):
    toHtmlFinished = QtCore.pyqtSignal()

    def __init__(self, data: pd.DataFrame = None):
        super(MainWindow, self).__init__()

        self._translate = QtCore.QCoreApplication.translate

        self.data = data

        self.setupUi()
        markers = Analytics.getMarkers(data, saved_cache=self.saved_codes, viewed_codes=self.viewed_codes)
        self.resetMap(markers)
        self.resetProjectsPage(data, None)
        self.setupFunctional()
        
    def setupUi(self):
        self.setObjectName("MainWindow")
        self.setWindowIcon(QtGui.QIcon('resources/icon.png'))
        self.resize(1400, 800)


        # Init Central Window
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_central_vidget = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_central_vidget.setObjectName("gridLayout_central_vidget")

        # Init Tab Widget on Central Window
        self.tab_widget = QtWidgets.QTabWidget(self.centralwidget)
        self.tab_widget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.tab_widget.setObjectName("tab_widget")


        ### Map Tab ###
        self.map_tab = QtWidgets.QWidget()
        self.map_tab.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.map_tab.setObjectName("map_tab")
        self.gridLayout_map_tab = QtWidgets.QGridLayout(self.map_tab)
        self.gridLayout_map_tab.setObjectName("gridLayout_map_tab")
        
        # Map Layer (Map Tab)
        self.map_layer = QWebEngineView()
        self.map_layer.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.map_layer.sizePolicy().hasHeightForWidth())
        self.map_layer.setSizePolicy(sizePolicy)
        self.map_layer.setStyleSheet("")
        self.map_layer.setObjectName("map_layer")
        self.gridLayout_map_layer = QtWidgets.QGridLayout(self.map_layer)
        self.gridLayout_map_layer.setObjectName("gridLayout_map_layer")
        self.gridLayout_map_tab.addWidget(self.map_layer)



        # Filter Layer (Map Tab)
        self.filter_layer = QtWidgets.QWidget(self.map_tab)
        self.filter_layer.setStyleSheet("")
        self.filter_layer.setGeometry(0, 0, 350, 350)
        self.filter_layer.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.filter_layer.setObjectName("filter_layer")
        self.filter_layer.setHidden(True)
        self.gridLayout_filter_layer = QtWidgets.QGridLayout(self.filter_layer)
        self.gridLayout_filter_layer.setObjectName("gridLayout_filter_layer")

        self.filter_label_keyWords = QtWidgets.QLabel(self.filter_layer)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.filter_label_keyWords.setFont(font)
        self.filter_label_keyWords.setObjectName("filter_label_keyWords")
        self.filter_label_keyWords.setText(self._translate("MainWindow", "Key Words"))
        empty_space = QtWidgets.QLabel(self.filter_layer)
        self.gridLayout_filter_layer.addWidget(empty_space, 0, 0, 1, 1)
        self.gridLayout_filter_layer.addWidget(self.filter_label_keyWords, 1, 0, 1, 1)
        
        
        self.plainTextEdit_filter_keyWords = QtWidgets.QPlainTextEdit(self.filter_layer)
        self.plainTextEdit_filter_keyWords.setStyleSheet("font: 10pt \"JetBrains Mono\";")
        self.plainTextEdit_filter_keyWords.setObjectName("plainTextEdit_filter_keyWords")
        self.gridLayout_filter_layer.addWidget(self.plainTextEdit_filter_keyWords, 2, 0, 1, 1)
        
        self.label_filter_timeFrom = QtWidgets.QLabel(self.filter_layer)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_filter_timeFrom.setFont(font)
        self.label_filter_timeFrom.setObjectName("label_filter_timeFrom")
        self.label_filter_timeFrom.setText(self._translate("MainWindow", "Time From:"))
        self.gridLayout_filter_layer.addWidget(self.label_filter_timeFrom, 3, 0, 1, 1)

        self.date_from = QtWidgets.QDateEdit(self.filter_layer)
        self.date_from.setObjectName("date_from")
        self.date_from.setDate(QtCore.QDate(2020,1,1))
        self.gridLayout_filter_layer.addWidget(self.date_from, 4, 0, 1, 1)

        self.label_filter_timeTo = QtWidgets.QLabel(self.filter_layer)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_filter_timeTo.setFont(font)
        self.label_filter_timeTo.setObjectName("label_filter_timeTo")
        self.label_filter_timeTo.setText(self._translate("MainWindow", "Time To"))
        self.gridLayout_filter_layer.addWidget(self.label_filter_timeTo, 5, 0, 1, 1)
        
        self.date_to = QtWidgets.QDateEdit(self.filter_layer)
        self.date_to.setObjectName("date_to")
        self.date_to.setDate(QtCore.QDate(2022, 1, 1))
        self.gridLayout_filter_layer.addWidget(self.date_to, 6, 0, 1, 1)
        
        self.pushButton_filter_apply = QtWidgets.QPushButton(self.filter_layer)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_filter_apply.setFont(font)
        self.pushButton_filter_apply.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_filter_apply.setStyleSheet("background-color: rgb(76, 175, 80);\ncolor: rgb(255, 255, 255);")
        self.pushButton_filter_apply.setObjectName("pushButton_filter_apply")
        self.pushButton_filter_apply.setText(self._translate("MainWindow", "Apply"))
        self.gridLayout_filter_layer.addWidget(self.pushButton_filter_apply, 7, 0, 1, 1)

        self.pushButton_filter_change_status = QtWidgets.QPushButton(self.map_tab)
        self.pushButton_filter_change_status.setGeometry(156, 11, 200, 30)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_filter_change_status.setFont(font)
        self.pushButton_filter_change_status.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_filter_change_status.setStyleSheet(
            "padding:0.3em 1.2em; margin:0 0.3em 0.3em 0; border-radius:10em; color:#FFFFFF; background-color:#4eb5f1")
        self.pushButton_filter_change_status.setObjectName("pushButton_filter_change_status")
        self.pushButton_filter_change_status.setText(self._translate("MainWindow", "Filter"))

        # self.filter_layer.show()

        
        
        ### Projects Tab ###
        self.projects_tab = QtWidgets.QWidget()
        self.projects_tab.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.projects_tab.setObjectName("projects_tab")
        self.gridLayout_progects_tab = QtWidgets.QGridLayout(self.projects_tab)
        self.gridLayout_progects_tab.setObjectName("gridLayout_progects_tab")

        self.pushButton_current_projects_save = QtWidgets.QPushButton(self.projects_tab)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_current_projects_save.setFont(font)
        self.pushButton_current_projects_save.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_current_projects_save.setObjectName("pushButton_current_projects_save")
        self.pushButton_current_projects_save.setText(self._translate("MainWindow", "Save Current List"))
        self.gridLayout_progects_tab.addWidget(self.pushButton_current_projects_save, 0, 0, 1, 1)

        self.projects_table = QWebEngineView(self.projects_tab)#QtWidgets.QTreeWidget(self.projects_tab)
        self.projects_table.setObjectName("projects_table")
        self.gridLayout_progects_tab.addWidget(self.projects_table, 1, 0, 1, 1)

        # Add both tabs (Map, Projects) to Tabs Widget
        self.tab_widget.addTab(self.map_tab, "")
        self.tab_widget.addTab(self.projects_tab, "")
        
        self.gridLayout_central_vidget.addWidget(self.tab_widget, 0, 0, 1, 1)

        self.setCentralWidget(self.centralwidget)


        ### Menu
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.actionFilter = QtWidgets.QAction(self)
        self.actionFilter.setObjectName("actionFilter")
        self.menuFile.addAction(self.actionFilter)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi()
        self.tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        self.setWindowTitle(self._translate("MainWindow", "WorkCapms Companion"))
        
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.map_tab), self._translate("MainWindow", "Map"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.projects_tab), self._translate("MainWindow", "Projects List"))
        
        self.menuFile.setTitle(self._translate("MainWindow", "File"))
        self.actionFilter.setText(self._translate("MainWindow", "Open Filter"))

    def setupFunctional(self):
        self.pushButton_filter_change_status.clicked.connect(self._changeStateMapTabFilter)
        self.actionFilter.triggered.connect(self._changeStateMapTabFilter)

        self.pushButton_filter_apply.clicked.connect(self._onApplyFilter)

        self.pushButton_current_projects_save.clicked.connect(self._saveProjectsList)

    def _saveProjectsList(self):
        path_save, _ = QFileDialog.getSaveFileName(None, caption="Save Projects List",
                                                filter=" (*.html);;All Files (*)")
        try:
            shutil.copy(self.cache_last_saved_projects_page_path, path_save)
        except:
            pass


    def _onApplyFilter(self):
        self.saveCache()

        key_words_content = self.plainTextEdit_filter_keyWords.toPlainText()
        key_words = key_words_content.split('|')
        key_words = [w.strip() for w in key_words]
        date_from = self.date_from.date().toString('dd-MM-yyyy')
        date_to = self.date_to.date().toString('dd-MM-yyyy')

        df = Analytics.selectByTime(self.data, date_from, date_to)
        if df.shape[0]:
            if any([len(word) for word in key_words]):
                df , keywords_list_found = Analytics.selectByKeywords(df, key_words)
            else:
                keywords_list_found = None
            markers = Analytics.getMarkers(df, keywords_list_found, self.saved_codes, self.viewed_codes)
            self.resetProjectsPage(df, keywords_list_found)
        else:
            markers = []

        self._changeStateMapTabFilter()
        self.resetMap(markers)


    def _changeStateMapTabFilter(self):
        self.filter_layer.setHidden( not self.filter_layer.isHidden() )
    
    def resetMap(self, markers: List[Union[Marker, MarkerCluster]]=None):
        markers = markers if markers is not None else []
        map = folium.Map(location=[50.2577, 14.9939], tiles='Stamen Terrain', zoom_start = 5)
        print(len(markers))
        for i, marker in enumerate(markers):
            marker.add_to(map)

        data = io.BytesIO()
        map.save(data, close_file=False)

        html = data.getvalue().decode()
        html = html.replace('<body>', '<body>' + open('app/templates/map_cache_injection.html').read(), 1)


        path = os.path.join(TEMP_PATH, "map.html")
        with open(path, 'w', encoding='utf8') as f:
            f.write(html)

        self.map_layer.load(QtCore.QUrl.fromLocalFile(path))

        data.close()
        
    def resetProjectsPage(self, df: pd.DataFrame, keywords_list: List[List[str]] = None):
        html = renderProjectsPageHTML(df, keywords_list)
        path = os.path.join(TEMP_PATH, 'projects_page.html')
        self.cache_last_saved_projects_page_path = path
        with open(path, 'w', encoding='utf8') as f:
            f.write(html)

        self.projects_table.load(QtCore.QUrl.fromLocalFile(path))


    def saveCache(self):
        current_page = self.map_layer.page()

        # Parse Save Cache ### Async
        current_page.runJavaScript('document.getElementById("history_save_projects").innerHTML', self.__store_html)
        loop = QtCore.QEventLoop()
        self.toHtmlFinished.connect(loop.quit)
        loop.exec_()

        current_saved = self.saved_codes
        save_counter = Counter(
            [*current_saved, *[code.strip() for code in self.__callback_output.split('/$/')]]
        )
        need_save = []
        for code, count in save_counter.items():
            if count % 2 != 0 and code != '': # One click - save. Two - unsave, ...
                need_save.append(code)
        with open(CACHE_SAVED_PATH, 'w') as f:
            f.write("/$/".join(need_save))


        # Parse Viewed Cache ### Async
        current_page.runJavaScript('document.getElementById("history_viewed_projects").innerHTML', self.__store_html)
        loop = QtCore.QEventLoop()
        self.toHtmlFinished.connect(loop.quit)
        loop.exec_()

        current_viewed = self.viewed_codes
        viewed = {*current_viewed, *[code.strip() for code in self.__callback_output.split('/$/')]}
        with open(CACHE_VIEWD_PATH, 'w') as f:
            f.write("/$/".join(viewed))


    def __store_html(self, html):
        self.__callback_output = html
        self.toHtmlFinished.emit()

    @property
    def saved_codes(self):
        return open(CACHE_SAVED_PATH).read().split('/$/') if os.path.exists(CACHE_SAVED_PATH) else []
    @property
    def viewed_codes(self):
        return open(CACHE_VIEWD_PATH).read().split('/$/') if os.path.exists(CACHE_VIEWD_PATH) else []


    def closeEvent(self, event):
        # Destructor
        shutil.rmtree(TEMP_PATH, ignore_errors=True)
        self.saveCache()
        super(MainWindow, self).closeEvent(event)




def start_app(data: pd.DataFrame):
    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow(data)

    main_window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    df = pd.read_csv("data/new_data.csv")
    df['DateStart'] = pd.to_datetime(df['DateStart'], dayfirst=True)
    df['DateEnd'] = pd.to_datetime(df['DateEnd'], dayfirst=True)

    start_app(df)

